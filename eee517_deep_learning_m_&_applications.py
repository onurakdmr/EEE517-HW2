# -*- coding: utf-8 -*-
"""EEE517-Deep Learning M & Applications

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h6PmOpjQu4OYY9H4pE0pOPxJk-70Kj7U
"""

# Import the necessary libraries
from tensorflow.keras.datasets import imdb

# Load the IMDB dataset
(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=10000)

# Print a sample review
print("Sample Review:")
print(x_train[0])

# Print the corresponding label for the sample review
print("\nLabel:")
print(y_train[0])

# Explore the size of the training and testing sets
print("\nTraining set size:", len(x_train))
print("Testing set size:", len(x_test))

# Clarify Inputs and Outputs
print("Inputs:")
print("x_train (sequences of words for training reviews):", x_train.shape)
print("x_test (sequences of words for testing reviews):", x_test.shape)

print("\nOutputs:")
print("y_train (sentiment labels for training reviews):", y_train.shape)
print("y_test (sentiment labels for testing reviews):", y_test.shape)

import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
from sklearn.metrics import confusion_matrix, classification_report
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.datasets import imdb

# Load the IMDB dataset
(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=10000)

# Pad sequences to a fixed length
max_len = 200
x_train = pad_sequences(x_train, maxlen=max_len)
x_test = pad_sequences(x_test, maxlen=max_len)

# Define function to create and train the model
def train_and_evaluate(neurons, batch_size, epochs):
    model = Sequential()
    model.add(Dense(neurons, input_dim=max_len, activation='relu'))
    model.add(Dense(1, activation='sigmoid'))

    optimizer = Adam(beta_1=0.9, beta_2=0.999, lr=0.001)  # Fixed learning rate

    model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])

    print(f"\nTraining with {neurons} neurons and batch size {batch_size} for {epochs} epochs:")

    # Train the model
    model.fit(x_train, y_train, epochs=epochs, batch_size=batch_size, verbose=0)

    # Evaluate on test set
    y_pred = model.predict(x_test)
    y_pred = (y_pred > 0.5).astype(int)  # Convert probabilities to binary predictions

    # Print confusion matrix and metrics
    print("\nConfusion Matrix:")
    print(confusion_matrix(y_test, y_pred))

    print("\nClassification Report:")
    print(classification_report(y_test, y_pred))

# Try different configurations
neurons_list = [64, 128, 256]
batch_sizes = [32, 64, 128]
epochs = 5

for neurons in neurons_list:
    for batch_size in batch_sizes:
        train_and_evaluate(neurons, batch_size, epochs)

